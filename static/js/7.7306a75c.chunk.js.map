{"version":3,"sources":["components/common/FormControls/FormControls.module.css","utils/validators/index.js","components/common/FormControls/FormControls.jsx","components/Login/Login.jsx"],"names":["module","exports","required","value","maxLength","maxL","length","Element","input","meta","touched","error","props","hasError","className","style","formControl","Textarea","Input","CreateField","type","name","placeholder","validators","component","text","validate","maxLength20","LoginReduxForm","reduxForm","form","handleSubmit","s","onSubmit","checked","div","formSummaryError","connect","state","userId","Auth","isAuth","login","to","data","password","remeberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,iCCDzH,oEAAO,IAAMC,EAAW,SAACC,GACvB,IAAIA,EACJ,MAAO,qBAGIC,EAAY,SAACC,GAAD,OAAU,SAACF,GAClC,GAAIA,EAAMG,OAASD,EAAM,MAAM,iBAAN,OAAwBA,EAAxB,e,oMCFrBE,EACJ,SAACA,GAAD,OACA,YAAoD,IAAjDC,EAAgD,EAAhDA,MAAgD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAYC,EAAY,gCAC3CC,EAAWH,GAAWC,EAC5B,OACE,sBAAKG,UAAWC,IAAMC,YAAc,KAAOH,EAAWE,IAAMJ,MAAQ,IAApE,UACE,8BACE,cAAC,EAAD,2BAAaH,GAAWI,MAEzBC,GAAY,+BAAOF,SAKfM,EAAWV,EAAQ,YAEnBW,EAAQX,EAAQ,SAEhBY,EAAc,SACzBC,EACAC,EACAC,EACAC,EACAC,GAGI,IAFJZ,EAEG,uDAFK,GACRa,EACG,uDADI,GAEP,OACE,gCACE,cAAC,IAAD,aACEL,KAAMA,EACNC,KAAMA,EACNC,YAAaA,EACbE,UAAWA,EACXE,SAAUH,GACNX,IAELa,O,uDCzCP,6GAWME,EAAcvB,YAAU,IAqCxBwB,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EAnCL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcpB,EAAY,EAAZA,MACjC,OACE,uBAAMI,MAAOiB,IAAEF,KAAMG,SAAUF,EAA/B,UACGZ,YAAY,QAAS,QAAS,QAAS,CAACjB,IAAUyB,GAAcT,KAChEC,YACC,WACA,WACA,WACA,CAACjB,IAAUyB,GACXT,KAEDC,YACC,WACA,YACA,KACA,KACA,QACA,CACEe,SAAS,GAEX,gBAGDvB,GACC,qBAAKwB,KAAG,EAACrB,UAAWC,IAAMqB,iBAA1B,SACGzB,IAGL,8BACE,mDA8BO0B,uBALS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,OACnBE,OAAQH,EAAME,KAAKC,UAGmB,CAAEC,WAA3BL,EApBD,SAAC,GAAuB,IAArBK,EAAoB,EAApBA,MAKf,OALmC,EAAbD,OAKH,cAAC,IAAD,CAAUE,GAAI,aAG/B,gCACE,uCACA,cAACf,EAAD,CAAgBK,SATH,SAACW,GAChBF,EAAME,EAAKF,MAAOE,EAAKC,SAAUD,EAAKE","file":"static/js/7.7306a75c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"error\":\"FormControls_error__24y5C\",\"formSummaryError\":\"FormControls_formSummaryError__kXbFS\"};","export const required = (value) => {\n  if (value) return undefined;\n  return \"Field is required\";\n};\n\nexport const maxLength = (maxL) => (value) => {\n  if (value.length > maxL) return `Max length is ${maxL} simbols`;\n  return undefined;\n};\n","import React from \"react\";\nimport style from \"./FormControls.module.css\";\nimport { Field } from \"redux-form\";\n\nconst Element =\n  (Element) =>\n  ({ input, meta: { touched, error }, ...props }) => {\n    const hasError = touched && error;\n    return (\n      <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\n        <div>\n          <Element {...input} {...props} />\n        </div>\n        {hasError && <span>{error}</span>}\n      </div>\n    );\n  };\n\nexport const Textarea = Element(\"textarea\");\n\nexport const Input = Element(\"input\");\n\nexport const CreateField = (\n  type,\n  name,\n  placeholder,\n  validators,\n  component,\n  props = {},\n  text = \"\"\n) => {\n  return (\n    <div>\n      <Field\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        component={component}\n        validate={validators}\n        {...props}\n      />\n      {text}\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./Login.module.css\";\n\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../redux/auth-reducer\";\nimport { Input, CreateField } from \"../common/FormControls/FormControls\";\nimport { maxLength, required } from \"../../utils/validators\";\nimport { Redirect } from \"react-router\";\nimport style from \"../common/FormControls/FormControls.module.css\";\n\nconst maxLength20 = maxLength(20);\n\nconst LoginForm = ({ handleSubmit, error }) => {\n  return (\n    <form style={s.form} onSubmit={handleSubmit}>\n      {CreateField(\"email\", \"login\", \"login\", [required, maxLength20], Input)}\n      {CreateField(\n        \"password\",\n        \"password\",\n        \"password\",\n        [required, maxLength20],\n        Input\n      )}\n      {CreateField(\n        \"checkbox\",\n        \"remeberMe\",\n        null,\n        null,\n        \"input\",\n        {\n          checked: true,\n        },\n        \" remember me\"\n      )}\n\n      {error && (\n        <div div className={style.formSummaryError}>\n          {error}\n        </div>\n      )}\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm({\n  form: \"Login\", // a unique identifier for this form\n})(LoginForm);\n\nconst Login = ({ login, isAuth }) => {\n  const onSubmit = (data) => {\n    login(data.login, data.password, data.remeberMe);\n  };\n\n  if (isAuth) return <Redirect to={\"/profile\"} />;\n\n  return (\n    <div>\n      <h1>LOGIN</h1>\n      <LoginReduxForm onSubmit={onSubmit} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userId: state.Auth.userId,\n  isAuth: state.Auth.isAuth,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n"],"sourceRoot":""}